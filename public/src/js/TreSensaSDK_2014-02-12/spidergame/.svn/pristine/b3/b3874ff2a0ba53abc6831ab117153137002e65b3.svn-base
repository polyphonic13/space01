# Build Script $Rev: 1486 $

module.exports = (grunt) ->

	# Parse game config into gameConfigContext
	vm = require("vm")	
	try
		gameConfigTxt = grunt.file.read("js/GameConfig.js")
		gameConfigContext = {}
		vm.runInNewContext gameConfigTxt, gameConfigContext
		gameConfigContext.GameConfig.RESOURCES ?= []
		gameConfigContext.GameConfig.CSS ?= []
		if gameConfigContext.GameConfig.PATH
			gameConfigContext.GameConfig.PATH = gameConfigContext.GameConfig.PATH.replace(/\//g,'')
	catch e
		grunt.fail.fatal "Failed to load GameConfig:\n" + e

	# Load up users personal build config
	try
		homeDir = process.env.HOME || process.env.USERPROFILE
		personalConfig = grunt.file.readJSON(homeDir + '/.tresensa/buildConfig.json')
	catch e
		grunt.fail.fatal "Failed to load buildConfig.json:\n #{e} \n Make sure you have a a personal buildConfig.json in ~/.tresensa/"

	# Parse adapter definitions into adapterDefsContext
	try
		adapterDefsText = grunt.file.read("#{personalConfig.clientSDKDir}/TGS/AdapterDefinitions.js")
		adapterDefsContext = {}
		vm.runInNewContext adapterDefsText, adapterDefsContext
	catch e
		grunt.fail.fatal "Failed to load adapter definitions:\n" + e

	# Load up game's build config
	try
		buildConfig = grunt.file.readJSON('buildConfig.json')
	catch e
		buildConfig = {}
		unless "bootstrap" in grunt.cli.tasks
			grunt.fail.fatal "Failed to load game's buildConfig.json:\n #{e} \n Run `grunt bootstrap` to create one"

	# all of these tempaltes should probably live in their own file, but trying to keep file 
	# dependancies down since we cant add single file externals
	manifestTemplate = """
		CACHE MANIFEST
		# Updated: <%= dateStamp %>

		<%= cdnDomain %>lib/tgl/tgl-<%= tglVersion %>.min.js

		<%= cdnDomain %>lib/tge/tge-<%= tgeVersion %>.min.js
		<%= cdnDomain %>lib/tge/css/tge-<%= tgeVersion %>.css

		<%= cdnDomain %>lib/tgs/tgs-<%= tgsVersion %>.min.js
		<%= cdnDomain %>lib/tgs/css/tgs-<%= tgsVersion %>.css
		<%= cdnDomain %>lib/tgs/tgs-adapters-<%= tgsVersion %>.min.js

		<%= cdnDomain %>lib/viewporter.min.js
		<%= cdnDomain %>lib/PxLoader.min.js
		<%= cdnDomain %>lib/PxLoaderImage.min.js
		<%= cdnDomain %>lib/iscroll-lite.min.js
		<%= cdnDomain %>lib/kik/cards.min.js
		<%= cdnDomain %>lib/bugsense.1.1.min.js

		<%= cdnDomain %>lib/tgs/A0020/A0020-<%= adapters.A0020.version %>.min.js

		//static.tresensa.com/tgs/images/amazoncoin.png
		//static.tresensa.com/tgs/images/facebookcredit.png
		//static.tresensa.com/tgs/images/gamesdotcom.png
		//static.tresensa.com/tgs/images/kik_login.png
		//static.tresensa.com/tgs/images/kik.png
		//static.tresensa.com/tgs/images/kik-moregames.png
		//static.tresensa.com/tgs/images/logout.png
		//static.tresensa.com/tgs/images/mocogold.png
		//static.tresensa.com/tgs/images/processing.gif
		//static.tresensa.com/tgs/images/test_login.png
		//static.tresensa.com/tgs/images/testicon.png
		//static.tresensa.com/tgs/images/more_games.png

		<%= files %>

		NETWORK:
		*
	"""

	indexTemplate = """
		<!DOCTYPE html>
		<html>
		<head>
			<%= baseHref %>
			<title><%= title %></title>

			<meta http-equiv="X-UA-Compatible" content="IE=IE9" >
			<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

			<meta name="apple-mobile-web-app-capable" content="yes">
			<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">

			<meta name="title" content="<%= title %>">
			<meta name="description" content="<%= description %>">
			<meta name="keywords" content="<%= keywords %>">

			<link rel="shortcut icon" href="favicon.ico">
			<link rel="image_src" href="banners/172x188.jpg">
			<link rel="apple-touch-icon" href="icons/144x144.png" />

			<link rel="stylesheet" href="leaderboard/css/game_specific.css" type="text/css" media="screen">

			<!-- Facebook meta-tags -->
			<meta property="og:url" content="<%= facebook.url %>">
			<meta property="og:title" content="<%= facebook.title %>">
			<meta property="og:description" content="<%= facebook.description %>">
			<meta property="og:image" content="<%= facebook.image %>">

			<!-- Twitter Card properties -->
			<meta name="twitter:card" content="player">
			<meta name="twitter:site" content="<%= twitter.site %>">
			<meta name="twitter:player" content="<%= twitter.player %>">
			<meta name="twitter:player:width" content="<%= twitter.width %>">
			<meta name="twitter:player:height" content="<%= twitter.height %>">
			<meta name="twitter:title" content="<%= twitter.title %>">
			<meta name="twitter:description" content="<%= twitter.description %>">
			<meta name="twitter:image" content="<%= twitter.image %>">

			<!-- Kik porperties -->
			<meta name="kik-unsupported" content="<%= kik.unsupported %>">
			<meta name="kik-more" content="<%= kik.more %>">
			<link rel="kik-icon" href="icons/256x256.png">
			<link rel="kik-icon-fallback" href="banners/256x160.png"
			<link rel="terms" href="http://www.tresensa.com/terms-of-use/">
			<link rel="privacy" href="http://www.tresensa.com/privacy-policy/">

			<meta name="viewport" content="<%= viewport %>" />

			<script>
				if (window.location.search.indexOf('dst=A0020') !== -1) {
					var cardsJS = document.write('<scr'+'ipt src="//static.tresensa.com/lib/kik/cards.min.js"><\/scr'+'ipt>');
				}
			</script>

			<script src="<%= libDir %><%= bootScript %>"></script>

			<%= headExtra %>
		</head>
		<body>
			<%= bodyExtra %>
			<%= body %>
		</body>
		</html>
	"""

	TGEStyle = """
	<style type="text/css">html,body{margin:0;padding:0;font-family:Arial;font-size:12px;color:#fff;background:#000 url(background.jpg);-webkit-text-size-adjust:none;-webkit-tap-highlight-color:transparent}#game_canvas{z-index:1;overflow:hidden;image-rendering:optimizeSpeed;-webkit-tap-highlight-color:transparent;-moz-tap-highlight-color:transparent;-webkit-user-select:none;-webkit-transform:translateZ(0);-ms-touch-action:none}#wrong_orientation{background:#000;position:absolute;top:0;left:0;z-index:2;width:100%;height:100%;display:none}#wrong_orientation img{display:block;margin:0 auto;width:80%}</style>
	"""

	defaultBody = """
	<div id = "wrong_orientation" style = "display:none;" ><img src = "reorient-message.jpg" /></div >
	<div id="viewporter" align="center" width="100%">
		<div id="preloader" align="center">Connecting to Game Server...</div>
		<div id="game_canvas"></div>
	</div>
	<div id="fb-root"></div>
    """

	webappManifestTemplate = """
	{
		"name": "<%= title %>",
		"description": "<%= description %>",
		"launch_path": "/index.html?dst=A0008&moregames=https%3A%2F%2Fmarketplace.firefox.com%2Fsearch%3Fq%3Dtresensa",
		"icons": {
			"32": "http://static.tresensa.com/<%= slug %>/icons/32x32.png",
			"60": "http://static.tresensa.com/<%= slug %>/icons/60x60.png",
			"90": "http://static.tresensa.com/<%= slug %>/90x90.png",
			"120": "http://static.tresensa.com/<%= slug %>/120x120.png",
			"256": "http://static.tresensa.com/<%= slug %>/256x256.png"
		},
		"developer": {
			"name": "TreSensa",
			"url": "http://www.tresensa.com"
		},
		"default_locale": "en",
		"orientation": ["<%= orientation %>"],
		"fullscreen": "true"
	}
	"""

	defaultBuildconfig = 
		title: gameConfigContext.GameConfig.TITLE or ""
		keywords: ""
		description: ""
		facebook:
			url: "#{gameConfigContext.GameConfig.HOST}/#{gameConfigContext.GameConfig.PATH}" or ""
			title: gameConfigContext.GameConfig.TITLE or ""
			description: ""
			image: "web-image.jpg"
		twitter:
			site: "@tresensa"
			player: "#{gameConfigContext.GameConfig.HOST}/#{gameConfigContext.GameConfig.PATH}" or ""
			width: "960"
			height: "536"
			description: ""
			title: gameConfigContext.GameConfig.TITLE or ""
			image: "web-image.jpg"
		kik:
			unsupported: "android-2.2,ios-4"
			more: "https://static.tresensa.com"

	# Configure tasks
	grunt.initConfig
		gameConfig: gameConfigContext.GameConfig
		personalConfig: personalConfig
		buildConfig: buildConfig
		distDir: "dist/"

		clean: ["<%= distDir %>"]

		copy:
			game:
				src: [
					"cache.manifest"
					"web-app-manifest.json"
					"index.html"
					"favicon.ico"
					"reorient-message.jpg"
					"background.jpg"
					"leaderboard/**"
				]
				dest: "<%= distDir %>"
			resources:
				src: "<%= gameConfig.RESOURCES %>"
				dest: "<%= distDir %>"
			game_css:
				src: "<%= gameConfig.CSS %>"
				dest: "<%= distDir %>"
			# Only run for QA builds
			assetsQA:
				src: ["assets/**", "!assets/source-images/**", "!assets/images-source/**"]
				dest: "<%= distDir %>"
			jsQA:
				src: "js/**"
				dest: "<%= distDir %>"
			# Only run for PROD builds
			assetsProd:
				expand: true
				cwd: "assets/"
				src: ["**", "!source-images/**", "!images-source/**"]
				dest: "<%= distDir %>assets-<%= gameConfig.VERSION %>/"
			jsProd:
				src: [
					"js/lib/head.load.min.js",
					"js/lib/tgl/tgl.boot.min.js"
					"js/GameConfig.js"
				]
				dest: "<%= distDir %>"
			# Only run for PROD builds if CDN is disabled
			tgSDK:
				src: "js/lib/**"
				dest: "<%= distDir %>"

		# Only used in QA builds, prod builds are concated by uglify
		concat:
			options:
				separator: ";"

			game:
				src: "<%= gameConfig.SOURCE %>"
				dest: "<%= distDir %>js/game/game-<%= gameConfig.VERSION %>.js"

		# Only used in PROD builds, QA builds are concated by concat
		uglify:
			game:
				src: "<%= gameConfig.SOURCE %>"
				dest: "<%= distDir %>js/game/game-<%= gameConfig.VERSION %>.min.js"

		cssmin:
			game_css:
				files:
					'<%= distDir %>css/game-<%= gameConfig.VERSION %>.css': "<%= gameConfig.CSS %>"

		# Used for both PROD and QA
		s3Files: [{
			expand: true
			cwd: '<%= distDir %>'
			# copy all files in dist except for manifest files 
			# and GameConfig which is copied in next step
			src: [
				'**'
				"!manifest.webapp"
				"!cache.manifest"
				"!web-app-manifest.json"
				"!js/GameConfig.js"
				"!index.html"
			]
			dest: '<%= buildConfig.slug %>/'
		}, {						
			expand: true
			cwd: '<%= distDir %>'
			# Copy manifests and index file with CacheControl set
			src: [
				"manifest.webapp"
				"web-app-manifest.json"
				"index.html"
				"js/GameConfig.js"
				"cache.manifest"
			]
			dest: '<%= buildConfig.slug %>/'
			params:
				CacheControl: 'max-age=0, private'
		}]


		aws_s3:
			options: 
				accessKeyId: '<%= personalConfig.aws.accessKeyId %>'
				secretAccessKey: '<%= personalConfig.aws.secretAccessKey %>'
				uploadConcurrency: 5
				downloadConcurrency: 5
			qa:
				options:
					bucket: 'qa-games.tresensa.com'
				files: '<%= s3Files %>'
			prod:
				options:
					bucket: 'games.tresensa.com'
				files: '<%= s3Files %>'
			game_bucket:
				options:
					bucket: '<%= buildConfig.slug %>.tresensa.com'
				files: '<%= s3Files %>'

		appcache:
			prod: 
				localFiles: [
					"background.jpg"
					"favicon.ico"
					"reorient-message.jpg"
					"leaderboard/**"
					'js/**'
					"assets-<%= gameConfig.VERSION %>/**"
				]
		shell:
			update:
				options:
					stdout: true
				command: [
					'svn export https://svn.tresensa.com/TresensaCoreClient/ClientSDKs/trunk/GameBuild/Gruntfile.coffee --force'
					'svn export https://svn.tresensa.com/TresensaCoreClient/ClientSDKs/trunk/GameBuild/package.json --force'
					'npm install'
				].join('&&')
			bootstrap_leaderboard:
				options:
					stdout: true
				command: [
					'svn export https://svn.tresensa.com/TresensaCoreClient/ClientSDKs/trunk/StudioKit/starter_template/leaderboard'
				].join('&&')

	# Load external libraries
	grunt.loadNpmTasks "grunt-contrib-uglify"
	grunt.loadNpmTasks "grunt-contrib-clean"
	grunt.loadNpmTasks "grunt-contrib-concat"
	grunt.loadNpmTasks "grunt-contrib-copy"
	grunt.loadNpmTasks 'grunt-contrib-cssmin'
	grunt.loadNpmTasks 'grunt-contrib-watch'
	grunt.loadNpmTasks 'grunt-aws-s3'
	grunt.loadNpmTasks 'grunt-shell'

	_ = require "underscore"

	# Create server task with special handling for lib-debug
	grunt.registerTask 'connect', 'Start a custom static web server.', ->
		connect = require('connect')
		injectLiveReload = require('connect-livereload')
		open = require('open')
		
		this.async()
		server = connect()

		if grunt.config("gameConfig.DEBUG")
			clientSDKDir = grunt.config("personalConfig.clientSDKDir")
			if clientSDKDir
				grunt.log.writeln("GameConfig set to DEBUG, mounting #{clientSDKDir}/dist as lib-debug and enabling livereload")
				grunt.log.writeln("Run `grunt dev` in client SDK folder to update automatically while editing")
				server.use(injectLiveReload(port: 35730))
				server.use('/js/lib-debug/', connect.static(clientSDKDir + "/dist"))
			else
				grunt.log.writeln("GameConfig set to DEBUG but no `clientSDKDir` found in ~/.tresensa/buildConfig.json, using local lib-debug folder")


		server.use(connect.static('dist'))
		server.listen(8080).on 'listening', ->
			grunt.log.ok('Started static web server on http://localhost:8080');
			# open("http://localhost:8080")

	# Migrate project to new lib external
	grunt.registerTask 'migrate', ->
		SVN = require 'svn-spawn'
		done = this.async()
		svn = new SVN(silent: true)
		grunt.log.write("Updating externals for lib...")
		svn.cmd ["propget", "svn:externals", "js"], (e, data) ->
			grunt.fatal("Error getting current externals: " + e) if e
			curExternals = data.trim().replace("/TGL/lib", "/GameTemplate/lib")
			svn.cmd ["propset", "svn:externals", curExternals, "js"], (e, data) ->
				grunt.fatal("Error setting new externals: " + e) if e
				grunt.log.ok()
				grunt.log.write("Downloading updates from svn...")
				svn.update (e, data) ->
					grunt.fatal("Error updating: " + e ) if e
					grunt.log.ok()
					done()

	# Create tasks
	grunt.registerTask "copy:qa", ["copy:game", "copy:resources", "copy:game_css", "copy:assetsQA" , "copy:jsQA"]
	grunt.registerTask "copy:prod", ->
		grunt.task.run ["copy:game", "copy:resources", "cssmin:game_css", "copy:assetsProd" , "copy:jsProd"]
		unless grunt.config("gameConfig.CDN.ENABLED")
			grunt.log.writeln "CDN disabled in GameConfig, including lib dir"
			grunt.task.run "copy:tgSDK"

	grunt.registerTask "build:qa", ["clean", "copy:qa" , "buildIndex", "buildGameConfig", "buildWebappManifest", "concat"]
	grunt.registerTask "build:prod", ["clean", "copy:prod" , "buildIndex", "buildGameConfig", "buildWebappManifest", "uglify"]
	grunt.registerTask "build", ->
		if grunt.config("gameConfig.PROD_ENV")
			grunt.log.writeln "Defaulting to PROD based on GameConfig"
			grunt.task.run("build:prod")
		else
			grunt.log.writeln "Defaulting to QA based on GameConfig"
			grunt.task.run("build:qa")

	grunt.registerTask "server", ["build", "connect"]

	grunt.registerTask "update", ["shell:update"]

	grunt.registerTask "deploy", (env = "qa") ->
		env = env.toLowerCase()
		if env is 'prod' and (!grunt.config("gameConfig.PROD_ENV") or !grunt.config("gameConfig.CDN.ENABLED"))
			grunt.fail.warn "Attempting to deploy to PROD environment with PROD_ENV or CDN.ENABLED set to false in GameConfig"

		buildSteps = ["build", "appcache", "aws_s3:#{env}"]
		buildSteps.push('aws_s3:game_bucket') if env is 'prod'
		grunt.task.run buildSteps

	grunt.registerTask 'buildWebappManifest', ->
		grunt.log.write("Building manifest.webapp...")
		templateData = _.defaults buildConfig, defaultBuildconfig,
			orientation: grunt.config("gameConfig.ORIENTATION")
		manifestText = grunt.template.process webappManifestTemplate, data: templateData
		grunt.file.write grunt.config.process('<%= distDir%>/manifest.webapp'), manifestText
		grunt.log.ok()

	grunt.registerTask "buildGameConfig", ->
		grunt.log.write("Building GameConfig.js...")
		gc = grunt.config("gameConfig")
		bc = grunt.config("buildConfig")

		gc.PATH = "/#{bc.slug}/"
		gc.HOST = "http://games.tresensa.com"
		gc.TITLE = bc.title

		outputConfig = "var GameConfig = #{JSON.stringify(gc, null, if gc.PROD_ENV && !gc.DEBUG then 0 else 4)};"
		grunt.file.write grunt.config.process('<%= distDir%>/js/GameConfig.js'), outputConfig
		grunt.log.ok()

	grunt.registerTask "buildIndex", ->
		cheerio = require "cheerio"

		if grunt.file.exists("index.html")
			indexText = grunt.file.read("index.html")
			$ = cheerio.load(indexText)

			# Find external script tags and warn
			ignoreScripts = [
				"js/lib/head.load.min.js"
				"js/lib/tgl/tgl.boot.min.js"
			]
			externalScriptTags = $("script[src]")
			files = _.compact (externalScriptTags.map ->
				src = $(@).attr("src")
				if src in ignoreScripts then null else src
			).toArray()
			if files.length
				grunt.log.warn "Found external js filex in index. Consider adding them to GameConfig:"
				grunt.log.writeln("SOURCE: " + JSON.stringify(files, null, 4)+",")

			# Find external css tags and warn
			ignoreStyles = [
				"style.css"
				"leaderboard/css/base.css"
				"leaderboard/css/game_specific.css"
			]
			externalCssTags = $("link[rel='stylesheet'][href]")
			files = _.compact (externalCssTags.map ->
				src = $(@).attr("href")
				if src in ignoreStyles then null else src
			).toArray()
			if files.length
				grunt.log.warn "Found external css filex in index. Consider adding them to GameConfig:"
				grunt.log.writeln("CSS: " + JSON.stringify(files, null, 4)+",")
			
			# Copy any extra head info as indicated by comments
			extraHeadRegex = /<!-- TGL:KEEP -->([\s\S]+)<!-- TGL:KEEP:END -->/
			headExtra = indexText.match(extraHeadRegex)?[1] or ""

			# Copy body and viewport
			bodyText = $("body").html().trim()
			viewport = $("mata[name=viewport]").attr("content")
		else
			grunt.log.writeln "using default TGE body template"

		# Set up defaults for buildconfig properties
		buildConfig.facebook = _.defaults buildConfig.facebook, defaultBuildconfig.facebook
		buildConfig.twitter = _.defaults buildConfig.twitter, defaultBuildconfig.twitter
		buildConfig.kik = _.defaults buildConfig.kik, defaultBuildconfig.kik
		templateData = _.defaults buildConfig, defaultBuildconfig,
			viewport: viewport or "initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui"
			bootScript: if grunt.config("gameConfig.DEBUG") then "lib-debug/tgl/tgl.boot.js" else "lib/tgl/tgl.boot.min.js"
			body: bodyText or defaultBody
			bodyExtra: if grunt.config("gameConfig.TGE.ENABLED") then TGEStyle else ""
			headExtra: headExtra or ""
			libDir: if grunt.config("gameConfig.CDN.ENABLED") && !grunt.config("gameConfig.DEBUG") then "//static.tresensa.com/" else "js/"
			baseHref: if grunt.config("gameConfig.CDN.ENABLED") && !grunt.config("gameConfig.DEBUG") then "<base href='//static.tresensa.com/#{buildConfig.slug}/' target='_blank'>" else ""

		# fill the template and generate the index file
		indexText = grunt.template.process indexTemplate, data: templateData
		# console.log indexText

		grunt.log.write("Building index.html...")
		grunt.file.write grunt.config.process('<%= distDir%>/index.html'), indexText
		grunt.log.ok()

	grunt.registerTask "bootstrap", ->
		cheerio = require "cheerio"
		slug = require "slug"

		config = grunt.config('gameConfig')
		if grunt.file.exists("buildConfig.json")
			grunt.log.ok("buildConfig.json exists...skipping")
		else
			grunt.log.write("Creating buildConfig.json...")
			outputConfig = {}
			if grunt.file.exists("index.html")
				$ = cheerio.load(grunt.file.read("index.html"))
				outputConfig = 
					keywords: $("meta[name='keywords']").attr('content')
					description: $("meta[name='description']").attr('content')
					facebook:
						url: $("meta[property='og:url']").attr('content')
						title: $("meta[property='og:title']").attr('content')
						description: $("meta[property='og:description']").attr('content') or $("meta[name='description']").attr('content')
						image: $("meta[property='og:image']").attr('content')
					twitter:
						player: $("meta[name='twitter:player']").attr('content')
						title: $("meta[name='twitter:title']").attr('content')
						site: $("meta[name='twitter:site']").attr('content')
						width: $("meta[name='twitter:player:width']").attr('content')
						height: $("meta[name='twitter:player:height']").attr('content')
						description: $("meta[name='twitter:description']").attr('content') or $("meta[name='description']").attr('content')
						image: $("meta[name='twitter:image']").attr('content')
					kik:
						unsupported: $("meta[name='kik-unsupported']").attr('content')
						more: $("meta[name='kik-more']").attr('content')
			else
				outputConfig =
					facebook: {}
					twitter: {}
					kik: {}

			outputConfig.facebook = _.defaults outputConfig.facebook, defaultBuildconfig.facebook
			outputConfig.twitter = _.defaults outputConfig.twitter, defaultBuildconfig.twitter
			outputConfig.kik = _.defaults outputConfig.kik, defaultBuildconfig.kik
			outputConfig.slug = config.PATH || slug(config.TITLE).toLowerCase()

			grunt.file.write "buildConfig.json", JSON.stringify(_.defaults(outputConfig, defaultBuildconfig), null, 4)
			grunt.log.ok()
			grunt.log.warn "A default buildConfig.json has been created. You should further edit it to fill in missing values."

			grunt.log.write("Removing HOST, PATH, CANVAS_ID, PRELOADER_DIV, and REORIENT_ID from GameConfig...")
			gameConfigTxt = gameConfigTxt.replace(/HOST:.*,/, '').replace(/PATH:.*,/, '').replace(/CANVAS_ID:.*,/, '').replace(/REORIENT_ID:.*,/, '').replace(/PRELOADER_DIV:.*,/, '')
			grunt.file.write "js/GameConfig.js", gameConfigTxt
			grunt.log.ok()

		if grunt.file.isDir("leaderboard")
			grunt.log.ok("leaderboard exists...skipping")
		else
			grunt.log.write("Leaderboard files missing, downloading...")
			grunt.task.run("shell:bootstrap_leaderboard")
			grunt.log.ok()

		unless grunt.config('gameConfig.TGE.ENABLED') and grunt.file.exists("index.html")
			grunt.log.ok("index.html already remvoed or not a TGE game...skipping")
		else
			grunt.log.write("Deleting old index.html as it is no longer used by TGE games...")
			grunt.file.delete("index.html")
			grunt.log.ok()

		unless grunt.file.exists("index-firefox.html")
			grunt.log.ok("index-firefox.html already remvoed")
		else
			grunt.log.write("Deleting old index-firefox.html as it is no longer used...")
			grunt.file.delete("index-firefox.html")
			grunt.log.ok()

		if grunt.file.exists("manifest.webapp")
			grunt.log.write("Deleting old manifest.webapp as it is now automatically generated on build...")
			grunt.file.delete("manifest.webapp")
			grunt.log.ok()

		grunt.log.ok "Done bootstrapping"


	grunt.registerMultiTask "appcache", ->
		if !grunt.config("gameConfig.PROD_ENV") or grunt.config("gameConfig.APPCACHE.ENABLED") == false
			grunt.log.writeln "Skip generating appcache: not a production build or APPCHACE.ENABLED == false"
			return

		assetDir = grunt.config.process("assets-<%= gameConfig.VERSION %>/")
		extraFiles = grunt.config("gameConfig.RESOURCES") || []
		excludedAssets = grunt.config("gameConfig.APPCACHE.EXCLUDE") || []
		excludedAssets = excludedAssets.map (file) ->"!" + file.replace("assets/", assetDir)

		# Gather files and variables to fill the template
		files = grunt.file.expand {filter: "isFile", cwd: grunt.config("distDir")}, @data.localFiles.concat(extraFiles, excludedAssets)
		appCacheText = grunt.template.process manifestTemplate, data:
			dateStamp: new Date()
			files: files.join('\n')
			cdnDomain: if grunt.config("gameConfig.CDN.ENABLED") then "//static.tresensa.com/" else "js/"
			tglVersion: grunt.config("gameConfig.TGL.VERSION")
			tgeVersion: grunt.config("gameConfig.TGE.VERSION")
			tgsVersion: grunt.config("gameConfig.TGS.VERSION")
			adapters: adapterDefsContext.TGS.AdapterDefinitions

		# Write out cache.manifest
		grunt.log.write("Writing cache.manifest...")
		grunt.file.write grunt.config.process('<%= distDir%>/cache.manifest'), appCacheText
		grunt.log.ok()

		# Add manifest to index.html (Note: this is assuming a <html> tag with no attributes, not very robust)
		grunt.log.write("Rewriting index.html to include appcache...")
		indexFile = grunt.config.process('<%= distDir%>/index.html')
		indexHtml = grunt.file.read indexFile
		indexHtml = indexHtml.replace("<html>", '<html manifest="cache.manifest">')
		grunt.file.write indexFile, indexHtml
		grunt.log.ok()

	grunt.registerTask "default", "server"
